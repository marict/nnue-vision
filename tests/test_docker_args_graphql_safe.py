"""Test GraphQL safety of docker_args generation in RunPod service.

This module validates that the docker command strings generated by runpod_service.py
are properly escaped and safe for embedding in GraphQL mutations, preventing the
syntax errors that were causing RunPod API failures.
"""

import pytest
from graphql import build_schema, parse

from runpod_service import _bash_c_quote, _create_docker_script, _escape_for_graphql

# Only import GraphQL if available (it's in requirements-dev.txt)
try:
    HAS_GRAPHQL = True
except ImportError:
    HAS_GRAPHQL = False


class TestGraphQLEscaping:
    """Test GraphQL string escaping for docker arguments."""

    def test_bash_c_quote_basic(self):
        """Test basic bash command quoting."""
        command = "echo hello world"
        result = _bash_c_quote(command)
        assert isinstance(result, str)
        # Should be quoted for bash safety
        assert "'" in result or '"' in result

    def test_bash_c_quote_with_special_chars(self):
        """Test bash quoting with special characters that could break GraphQL."""
        command = "echo 'single quotes' and \"double quotes\" and $vars"
        result = _bash_c_quote(command)
        assert isinstance(result, str)
        # Should be properly quoted
        assert result.startswith("'") or result.startswith('"')

    def test_escape_for_graphql_basic(self):
        """Test basic GraphQL string escaping."""
        value = "simple string"
        result = _escape_for_graphql(value)
        assert result == "simple string"

    def test_escape_for_graphql_quotes(self):
        """Test GraphQL escaping of double quotes."""
        value = 'string with "quotes"'
        result = _escape_for_graphql(value)
        assert '\\"' in result
        assert '"' not in result.replace('\\"', "")

    def test_escape_for_graphql_backslashes(self):
        """Test GraphQL escaping of backslashes."""
        value = "path\\with\\backslashes"
        result = _escape_for_graphql(value)
        assert "\\\\" in result

    def test_escape_for_graphql_newlines(self):
        """Test GraphQL escaping of newlines and whitespace."""
        value = "line1\nline2\r\nline3\ttabbed"
        result = _escape_for_graphql(value)
        assert "\\n" in result
        assert "\\r" in result
        assert "\\t" in result
        assert "\n" not in result
        assert "\r" not in result
        assert "\t" not in result


class TestDockerScriptGeneration:
    """Test docker script generation and GraphQL safety."""

    def test_create_docker_script_basic(self):
        """Test basic docker script creation."""
        training_command = "train_nnue.py --config config/train_nnue_default.py"
        result = _create_docker_script(training_command)

        assert isinstance(result, str)
        assert "apt-get update" in result
        assert "git clone" in result
        assert "container_setup.sh" in result
        assert training_command in result

    def test_create_docker_script_with_special_chars(self):
        """Test docker script with training commands containing special characters."""
        training_command = (
            "train_nnue.py --note=\"test run with 'quotes'\" --batch_size=32"
        )
        result = _create_docker_script(training_command)

        assert isinstance(result, str)
        assert training_command in result

    def test_docker_script_graphql_safe(self):
        """Test that docker scripts are safe for GraphQL embedding."""
        training_command = "train_nnue.py --note=\"complex 'test' with $special chars\""
        docker_script = _create_docker_script(training_command)
        bash_command = f"bash -c {_bash_c_quote(docker_script)}"
        final_docker_args = _escape_for_graphql(bash_command)

        # Should not contain unescaped quotes or other problematic characters
        assert '"' not in final_docker_args or '\\"' in final_docker_args
        assert isinstance(final_docker_args, str)


@pytest.mark.skipif(not HAS_GRAPHQL, reason="graphql-core not available")
class TestGraphQLMutationSafety:
    """Test that escaped docker args are safe in actual GraphQL mutations."""

    @pytest.fixture
    def graphql_schema(self):
        """Create a simple GraphQL schema for testing."""
        schema_def = """
            type Mutation {
                createPod(dockerArgs: String!): String
            }
            
            type Query {
                hello: String
            }
        """
        return build_schema(schema_def)

    def test_simple_mutation_parsing(self, graphql_schema):
        """Test that simple docker args parse correctly in GraphQL."""
        training_command = "train_nnue.py --config config/train_nnue_default.py"
        docker_script = _create_docker_script(training_command)
        bash_command = f"bash -c {_bash_c_quote(docker_script)}"
        escaped_args = _escape_for_graphql(bash_command)

        # Create a GraphQL mutation with the escaped args
        mutation = f"""
            mutation {{
                createPod(dockerArgs: "{escaped_args}")
            }}
        """

        # This should parse without errors
        try:
            parsed = parse(mutation)
            assert parsed is not None
        except Exception as e:
            pytest.fail(f"GraphQL parsing failed: {e}")

    def test_complex_mutation_parsing(self, graphql_schema):
        """Test complex docker args with special characters in GraphQL."""
        training_command = """train_nnue.py --note="test with 'quotes' and \\"double quotes\\"" --config=config/train_nnue_default.py"""
        docker_script = _create_docker_script(training_command)
        bash_command = f"bash -c {_bash_c_quote(docker_script)}"
        escaped_args = _escape_for_graphql(bash_command)

        # Create a GraphQL mutation with the escaped args
        mutation = f"""
            mutation {{
                createPod(dockerArgs: "{escaped_args}")
            }}
        """

        # This should parse without errors
        try:
            parsed = parse(mutation)
            assert parsed is not None
        except Exception as e:
            pytest.fail(f"GraphQL parsing failed with complex args: {e}")

    def test_mutation_with_newlines(self, graphql_schema):
        """Test docker args containing newlines are properly escaped."""
        # Create a docker script that inherently contains newlines
        training_command = "train_nnue.py --config config/train_nnue_default.py"
        docker_script = _create_docker_script(training_command)

        # Add some newlines to simulate complex bash commands
        complex_script = (
            docker_script + "\necho 'additional command'\necho 'another line'"
        )
        bash_command = f"bash -c {_bash_c_quote(complex_script)}"
        escaped_args = _escape_for_graphql(bash_command)

        # Should not contain literal newlines
        assert "\n" not in escaped_args
        assert "\\n" in escaped_args or "\n" not in complex_script

        # Create a GraphQL mutation
        mutation = f"""
            mutation {{
                createPod(dockerArgs: "{escaped_args}")
            }}
        """

        # Should parse correctly
        try:
            parsed = parse(mutation)
            assert parsed is not None
        except Exception as e:
            pytest.fail(f"GraphQL parsing failed with newlines: {e}")


class TestRegressionCases:
    """Test specific cases that caused the original GraphQL failures."""

    def test_single_quote_regression(self):
        """Test that single quotes don't cause 'Unexpected single quote' errors."""
        training_command = "train_nnue.py --note='single quoted note'"
        docker_script = _create_docker_script(training_command)
        bash_command = f"bash -c {_bash_c_quote(docker_script)}"
        escaped_args = _escape_for_graphql(bash_command)

        # Create mutation that would have failed before
        mutation = f"""
            mutation {{
                createPod(dockerArgs: "{escaped_args}")
            }}
        """

        # Should parse without the "Unexpected single quote" error
        try:
            parsed = parse(mutation)
            assert parsed is not None
        except Exception as e:
            pytest.fail(f"Single quote regression test failed: {e}")

    def test_number_format_regression(self):
        """Test that numeric arguments don't cause 'Invalid number' errors."""
        training_command = "train_nnue.py --batch_size=32 --learning_rate=1e-4"
        docker_script = _create_docker_script(training_command)
        bash_command = f"bash -c {_bash_c_quote(docker_script)}"
        escaped_args = _escape_for_graphql(bash_command)

        # Create mutation with numeric args
        mutation = f"""
            mutation {{
                createPod(dockerArgs: "{escaped_args}")
            }}
        """

        # Should parse without "Invalid number, expected digit but got 'f'" error
        try:
            parsed = parse(mutation)
            assert parsed is not None
        except Exception as e:
            pytest.fail(f"Number format regression test failed: {e}")

    @pytest.mark.parametrize("problematic_char", ['"', "'", "\\", "\n", "\t", "$", "`"])
    def test_various_problematic_characters(self, problematic_char):
        """Test various characters that could break GraphQL syntax."""
        training_command = f"train_nnue.py --note=test{problematic_char}value"
        docker_script = _create_docker_script(training_command)
        bash_command = f"bash -c {_bash_c_quote(docker_script)}"
        escaped_args = _escape_for_graphql(bash_command)

        # Create mutation
        mutation = f"""
            mutation {{
                createPod(dockerArgs: "{escaped_args}")
            }}
        """

        # Should parse regardless of the problematic character
        try:
            parsed = parse(mutation)
            assert parsed is not None
        except Exception as e:
            pytest.fail(f"Failed with character '{problematic_char}': {e}")


if __name__ == "__main__":
    # Run the tests
    pytest.main([__file__, "-v"])
